wandb: Detected [huggingface_hub.inference, openai] in use.
wandb: Use W&B Weave for improved LLM call tracing. Install Weave with `pip install weave` then add `import weave` to the top of your script.
wandb: For more information, check out the docs at: https://weave-docs.wandb.ai/
  0%|          | 0/477 [00:00<?, ?it/s]/export/home2/weijie210/ipi_huawei/aside/fine-tune.py:318: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  segment_ids = torch.tensor(segment_ids)
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "LogEntryManager.processLogEntries", "description": "Processes and stores log entries into the database with optional timestamp formatting.", "parameters": {"type": "dict", "properties": {"logEntries": {"description": "List of log entries to be processed.", "type": "array", "items": {"type": "dict", "properties": {"entryID": {"description": "Unique identifier for the log entry.", "type": "string"}, "entryMessage": {"description": "The message content of the log entry.", "type": "string"}, "entryTimestamp": {"description": "Timestamp of the log entry. Format must match '%Y-%m-%d %H:%M:%S'.", "type": "string", "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"}}, "required": ["entryID", "entryMessage", "entryTimestamp"]}}, "databaseTable": {"description": "The database table where log entries will be stored.", "type": "string"}}, "required": ["logEntries", "databaseTable"]}, "required": null}
{"name": "DatabaseLogger.initializeConnection", "description": "Establishes a secure connection to the specified database for logging purposes, with configurable timeout and retry options.", "parameters": {"type": "dict", "properties": {"connectionDetails": {"description": "Details of the database connection.", "type": "dict", "properties": {"databaseURL": {"description": "The URL of the database to connect to.", "type": "string"}, "username": {"description": "The username for database authentication.", "type": "string"}, "password": {"description": "The password for database authentication.", "type": "string"}}, "required": ["databaseURL", "username", "password"]}, "timeout": {"description": "Connection timeout in seconds.", "type": "int"}, "retryOptions": {"description": "Options for connection retry.", "type": "dict", "properties": {"maxRetries": {"description": "Maximum number of retry attempts.", "type": "int"}, "retryDelay": {"description": "Delay between retries in seconds.", "type": "int"}}, "required": ["maxRetries", "retryDelay"]}}, "required": ["connectionDetails"]}, "required": null}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I need to process a batch of log entries into the 'app_logs' table. The entries are as follows: [{"entryID": "001", "entryMessage": "System startup", "entryTimestamp": "2023-09-01 12:00:00"}, {"entryID": "002", "entryMessage": "User login successful", "entryTimestamp": "2023-09-01 12:30:00"}]. Can you help with this?<|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "LogEntryManager.processLogEntries", "arguments": {"logEntries": [{"entryID": "001", "entryMessage": "System startup", "entryTimestamp": "2023-09-01 12:00:00"}, {"entryID": "002", "entryMessage": "User login successful", "entryTimestamp": "2023-09-01 12:30:00"}], "databaseTable": "app_logs"}}
</tool_call><|im_end|>
`loss_type=None` was set in the config but it is unrecognized. Using the default loss: `ForCausalLMLoss`.
  2%|▏         | 10/477 [02:27<1:49:40, 14.09s/it]2025-09-24 20:06:50,513 - INFO - Step 10: Train Loss = 0.7489

[2025-09-24 20:04:56,918] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.7489, 'grad_norm': 10.32067584991455, 'learning_rate': 4.5e-07, 'epoch': 0.06}
  4%|▍         | 20/477 [04:46<1:46:22, 13.97s/it]2025-09-24 20:09:10,163 - INFO - Step 20: Train Loss = 0.8225
{'loss': 0.8225, 'grad_norm': 10.104024887084961, 'learning_rate': 9.499999999999999e-07, 'epoch': 0.13}
  6%|▋         | 30/477 [07:07<1:44:58, 14.09s/it]2025-09-24 20:11:30,359 - INFO - Step 30: Train Loss = 0.6131
{'loss': 0.6131, 'grad_norm': 3.6601614952087402, 'learning_rate': 9.990433483284527e-07, 'epoch': 0.19}
[2025-09-24 20:11:45,898] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 40/477 [09:29<1:43:31, 14.21s/it]2025-09-24 20:13:52,221 - INFO - Step 40: Train Loss = 0.3807
{'loss': 0.3807, 'grad_norm': 3.210986375808716, 'learning_rate': 9.957411038289047e-07, 'epoch': 0.25}
 10%|█         | 50/477 [11:49<1:39:06, 13.93s/it]2025-09-24 20:16:12,581 - INFO - Step 50: Train Loss = 0.3575
{'loss': 0.3575, 'grad_norm': 1.2751481533050537, 'learning_rate': 9.900970515805562e-07, 'epoch': 0.32}
 13%|█▎        | 60/477 [13:49<1:20:34, 11.59s/it]2025-09-24 20:18:12,994 - INFO - Step 60: Train Loss = 0.3187
{'loss': 0.3187, 'grad_norm': 1.259217381477356, 'learning_rate': 9.821378532525478e-07, 'epoch': 0.38}
 15%|█▍        | 70/477 [15:47<1:18:45, 11.61s/it]2025-09-24 20:20:10,722 - INFO - Step 70: Train Loss = 0.3107
{'loss': 0.3107, 'grad_norm': 1.2023388147354126, 'learning_rate': 9.719011069221315e-07, 'epoch': 0.44}
 17%|█▋        | 80/477 [17:43<1:16:56, 11.63s/it]2025-09-24 20:22:06,227 - INFO - Step 80: Train Loss = 0.2974
{'loss': 0.2974, 'grad_norm': 1.144858479499817, 'learning_rate': 9.594351694669069e-07, 'epoch': 0.5}
 19%|█▉        | 90/477 [19:37<1:13:26, 11.39s/it]2025-09-24 20:24:00,694 - INFO - Step 90: Train Loss = 0.3168
{'loss': 0.3168, 'grad_norm': 0.771672248840332, 'learning_rate': 9.447989281340752e-07, 'epoch': 0.57}
 21%|██        | 100/477 [21:32<1:11:33, 11.39s/it]2025-09-24 20:25:56,069 - INFO - Step 100: Train Loss = 0.3106
{'loss': 0.3106, 'grad_norm': 1.3072071075439453, 'learning_rate': 9.280615223657801e-07, 'epoch': 0.63}
 23%|██▎       | 110/477 [23:29<1:10:42, 11.56s/it]2025-09-24 20:27:53,013 - INFO - Step 110: Train Loss = 0.3724
{'loss': 0.3724, 'grad_norm': 1.181540846824646, 'learning_rate': 9.093020171945964e-07, 'epoch': 0.69}
 25%|██▌       | 120/477 [25:25<1:08:12, 11.46s/it]2025-09-24 20:29:48,359 - INFO - Step 120: Train Loss = 0.4002
{'loss': 0.4002, 'grad_norm': 1.3607572317123413, 'learning_rate': 8.886090297519955e-07, 'epoch': 0.76}
 27%|██▋       | 130/477 [27:21<1:07:05, 11.60s/it]2025-09-24 20:31:44,384 - INFO - Step 130: Train Loss = 0.2999
{'loss': 0.2999, 'grad_norm': 1.3660838603973389, 'learning_rate': 8.660803106541042e-07, 'epoch': 0.82}
 29%|██▉       | 140/477 [29:16<1:05:23, 11.64s/it]2025-09-24 20:33:39,336 - INFO - Step 140: Train Loss = 0.3715
{'loss': 0.3715, 'grad_norm': 1.1014964580535889, 'learning_rate': 8.418222822422348e-07, 'epoch': 0.88}
 31%|███▏      | 150/477 [31:09<1:02:42, 11.51s/it]2025-09-24 20:35:33,063 - INFO - Step 150: Train Loss = 0.3411
{'loss': 0.3411, 'grad_norm': 1.074539303779602, 'learning_rate': 8.159495358594627e-07, 'epoch': 0.95}
 33%|███▎      | 159/477 [32:48<53:54, 10.17s/it]  
***** Running Evaluation *****
  Num examples = 469
  Batch size = 8
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "Get Greet", "description": "Generates a personalized greeting message based on the provided name and cringe level.", "parameters": {"type": "dict", "properties": {"name": {"description": "The name of the person to be greeted.", "type": "string"}, "cringeLevel": {"description": "The level of cringe to include in the greeting message.", "type": "int"}}, "required": ["name", "cringeLevel"]}, "required": null}
{"name": "Twitter Auto Complete", "description": "Auto complete search queries on Twitter", "parameters": {"type": "dict", "properties": {"q": {"description": "Search query", "type": "string"}}, "required": ["q"]}, "required": null}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
Can you create personalized greetings for four of my friends? Their names are Alex, Jamie, Taylor, and Jordan. I want different levels of cringe for each: 1 for Alex, 2 for Jamie, 3 for Taylor, and 4 for Jordan.<|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "Get Greet", "arguments": {"name": "Alex", "cringeLevel": 1}}
</tool_call>
<tool_call>
{"name": "Get Greet", "arguments": {"name": "Jamie", "cringeLevel": 2}}
</tool_call>
<tool_call>
{"name": "Get Greet", "arguments": {"name": "Taylor", "cringeLevel": 3}}
</tool_call>
<tool_call>
{"name": "Get Greet", "arguments": {"name": "Jordan", "cringeLevel": 4}}
</tool_call><|im_end|>
 33%|███▎      | 159/477 [33:03<53:54, 10.17s/i2025-09-24 20:37:26,349 - INFO - Step 159: Eval Loss = 0.2660
100%|██████████| 15/15 [00:13<00:00,  1.01s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights

{'eval_loss': 0.2660232484340668, 'eval_runtime': 14.7119, 'eval_samples_per_second': 31.879, 'eval_steps_per_second': 1.02, 'epoch': 1.0}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
/export/home2/weijie210/ipi_huawei/aside/fine-tune.py:318: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  segment_ids = torch.tensor(segment_ids)
 34%|███▎      | 160/477 [36:56<7:10:20, 81.45s/it]2025-09-24 20:41:19,402 - INFO - Step 160: Train Loss = 0.2847
{'loss': 0.2847, 'grad_norm': 1.0124788284301758, 'learning_rate': 7.885842905380489e-07, 'epoch': 1.01}
 36%|███▌      | 170/477 [38:53<1:09:10, 13.52s/it]2025-09-24 20:43:16,348 - INFO - Step 170: Train Loss = 0.3230
{'loss': 0.323, 'grad_norm': 1.09389066696167, 'learning_rate': 7.59855815654784e-07, 'epoch': 1.07}
 38%|███▊      | 180/477 [40:49<57:07, 11.54s/it]2025-09-24 20:45:12,622 - INFO - Step 180: Train Loss = 0.2882
{'loss': 0.2882, 'grad_norm': 1.032942771911621, 'learning_rate': 7.298998202815473e-07, 'epoch': 1.13}
 40%|███▉      | 190/477 [42:45<55:21, 11.57s/it]2025-09-24 20:47:09,008 - INFO - Step 190: Train Loss = 0.2911
{'loss': 0.2911, 'grad_norm': 1.25163733959198, 'learning_rate': 6.988578121156955e-07, 'epoch': 1.2}
 42%|████▏     | 200/477 [44:41<53:53, 11.67s/it]2025-09-24 20:49:04,577 - INFO - Step 200: Train Loss = 0.3154
{'loss': 0.3154, 'grad_norm': 1.2227457761764526, 'learning_rate': 6.668764290186039e-07, 'epoch': 1.26}
 44%|████▍     | 210/477 [46:37<51:14, 11.51s/it]2025-09-24 20:51:00,399 - INFO - Step 210: Train Loss = 0.3296
{'loss': 0.3296, 'grad_norm': 1.1394904851913452, 'learning_rate': 6.341067463200677e-07, 'epoch': 1.32}
 46%|████▌     | 220/477 [48:32<49:18, 11.51s/it]2025-09-24 20:52:55,649 - INFO - Step 220: Train Loss = 0.2405
{'loss': 0.2405, 'grad_norm': 0.9034679532051086, 'learning_rate': 6.007035631607604e-07, 'epoch': 1.38}
 48%|████▊     | 230/477 [50:27<47:16, 11.48s/it]2025-09-24 20:54:50,901 - INFO - Step 230: Train Loss = 0.3060
{'loss': 0.306, 'grad_norm': 1.0418037176132202, 'learning_rate': 5.668246712439578e-07, 'epoch': 1.45}
 50%|█████     | 240/477 [52:23<46:49, 11.85s/it]2025-09-24 20:56:46,661 - INFO - Step 240: Train Loss = 0.2601
{'loss': 0.2601, 'grad_norm': 0.7309700846672058, 'learning_rate': 5.326301094508399e-07, 'epoch': 1.51}
 52%|█████▏    | 250/477 [54:20<44:03, 11.65s/it]2025-09-24 20:58:43,217 - INFO - Step 250: Train Loss = 0.3089
{'loss': 0.3089, 'grad_norm': 1.1488789319992065, 'learning_rate': 4.982814078404543e-07, 'epoch': 1.57}
 55%|█████▍    | 260/477 [56:15<41:44, 11.54s/it]2025-09-24 21:00:38,546 - INFO - Step 260: Train Loss = 0.2922
{'loss': 0.2922, 'grad_norm': 0.98953777551651, 'learning_rate': 4.6394082460557803e-07, 'epoch': 1.64}
 57%|█████▋    | 270/477 [58:14<40:56, 11.87s/it]2025-09-24 21:02:37,343 - INFO - Step 270: Train Loss = 0.3188
{'loss': 0.3188, 'grad_norm': 1.153084635734558, 'learning_rate': 4.2977057958898097e-07, 'epoch': 1.7}
 59%|█████▊    | 280/477 [1:00:12<38:46, 11.81s/it]2025-09-24 21:04:35,613 - INFO - Step 280: Train Loss = 0.3050
{'loss': 0.305, 'grad_norm': 0.9747726917266846, 'learning_rate': 3.959320879808509e-07, 'epoch': 1.76}
 61%|██████    | 290/477 [1:02:08<36:21, 11.67s/it]2025-09-24 21:06:32,102 - INFO - Step 290: Train Loss = 0.3381
{'loss': 0.3381, 'grad_norm': 1.2123750448226929, 'learning_rate': 3.625851978172765e-07, 'epoch': 1.83}
 63%|██████▎   | 300/477 [1:04:04<34:07, 11.57s/it]2025-09-24 21:08:27,848 - INFO - Step 300: Train Loss = 0.3559
{'loss': 0.3559, 'grad_norm': 1.1861976385116577, 'learning_rate': 3.298874348817369e-07, 'epoch': 1.89}
 65%|██████▍   | 310/477 [1:06:01<32:49, 11.79s/it]2025-09-24 21:10:24,289 - INFO - Step 310: Train Loss = 0.2543
{'loss': 0.2543, 'grad_norm': 0.9962369799613953, 'learning_rate': 2.9799325857656855e-07, 'epoch': 1.95}
 67%|██████▋   | 318/477 [1:07:28<26:43, 10.09s/it]
***** Running Evaluation *****
  Num examples = 469
  Batch size = 8
 67%|██████▋   | 318/477 [1:07:42<26:43, 10.09s2025-09-24 21:12:05,631 - INFO - Step 318: Eval Loss = 0.2549
100%|██████████| 15/15 [00:13<00:00,  1.05it/s] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 0.25486671924591064, 'eval_runtime': 14.4162, 'eval_samples_per_second': 32.533, 'eval_steps_per_second': 1.04, 'epoch': 2.0}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Deleting older checkpoint [/dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-159] due to args.save_total_limit
/export/home2/weijie210/ipi_huawei/aside/fine-tune.py:318: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  segment_ids = torch.tensor(segment_ids)
 67%|██████▋   | 320/477 [1:11:51<2:40:24, 61.30s/it]2025-09-24 21:16:14,303 - INFO - Step 320: Train Loss = 0.3007
{'loss': 0.3007, 'grad_norm': 1.1561591625213623, 'learning_rate': 2.6705333227956303e-07, 'epoch': 2.01}
 69%|██████▉   | 330/477 [1:13:47<31:49, 12.99s/it]2025-09-24 21:18:10,562 - INFO - Step 330: Train Loss = 0.2876
{'loss': 0.2876, 'grad_norm': 0.9824459552764893, 'learning_rate': 2.3721381163242537e-07, 'epoch': 2.08}
 71%|███████▏  | 340/477 [1:15:44<27:06, 11.87s/it]2025-09-24 21:20:07,747 - INFO - Step 340: Train Loss = 0.3300
{'loss': 0.33, 'grad_norm': 1.0722414255142212, 'learning_rate': 2.0861565412311087e-07, 'epoch': 2.14}
 73%|███████▎  | 350/477 [1:17:40<24:49, 11.73s/it]2025-09-24 21:22:03,659 - INFO - Step 350: Train Loss = 0.3362
{'loss': 0.3362, 'grad_norm': 1.153455376625061, 'learning_rate': 1.8139395322347334e-07, 'epoch': 2.2}
 75%|███████▌  | 360/477 [1:19:36<22:34, 11.58s/it]2025-09-24 21:24:00,033 - INFO - Step 360: Train Loss = 0.2968
{'loss': 0.2968, 'grad_norm': 1.0657906532287598, 'learning_rate': 1.5567730022765752e-07, 'epoch': 2.26}
 78%|███████▊  | 370/477 [1:21:31<20:32, 11.52s/it]2025-09-24 21:25:55,095 - INFO - Step 370: Train Loss = 0.2336
{'loss': 0.2336, 'grad_norm': 1.2681670188903809, 'learning_rate': 1.3158717680582128e-07, 'epoch': 2.33}
 80%|███████▉  | 380/477 [1:23:29<18:51, 11.66s/it]2025-09-24 21:27:52,903 - INFO - Step 380: Train Loss = 0.3248
{'loss': 0.3248, 'grad_norm': 0.9604089260101318, 'learning_rate': 1.0923738114266823e-07, 'epoch': 2.39}
 82%|████████▏ | 390/477 [1:25:25<16:44, 11.55s/it]2025-09-24 21:29:48,305 - INFO - Step 390: Train Loss = 0.2458
{'loss': 0.2458, 'grad_norm': 1.0529484748840332, 'learning_rate': 8.873349037163319e-08, 'epoch': 2.45}
 84%|████████▍ | 400/477 [1:27:20<14:44, 11.49s/it]2025-09-24 21:31:44,179 - INFO - Step 400: Train Loss = 0.3155
{'loss': 0.3155, 'grad_norm': 1.046889305114746, 'learning_rate': 7.017236184409859e-08, 'epoch': 2.52}
 86%|████████▌ | 410/477 [1:29:16<12:50, 11.50s/it]2025-09-24 21:33:40,068 - INFO - Step 410: Train Loss = 0.3035
{'loss': 0.3035, 'grad_norm': 1.245484471321106, 'learning_rate': 5.364167558957267e-08, 'epoch': 2.58}
 88%|████████▊ | 420/477 [1:31:13<11:05, 11.68s/it]2025-09-24 21:35:36,393 - INFO - Step 420: Train Loss = 0.2452
{'loss': 0.2452, 'grad_norm': 0.9118832945823669, 'learning_rate': 3.921952012818208e-08, 'epoch': 2.64}
 90%|█████████ | 430/477 [1:33:08<08:57, 11.45s/it]2025-09-24 21:37:31,984 - INFO - Step 430: Train Loss = 0.3096
{'loss': 0.3096, 'grad_norm': 1.1003308296203613, 'learning_rate': 2.6974023592036376e-08, 'epoch': 2.71}
 92%|█████████▏| 440/477 [1:35:05<07:10, 11.64s/it]2025-09-24 21:39:28,433 - INFO - Step 440: Train Loss = 0.2654
{'loss': 0.2654, 'grad_norm': 1.0372012853622437, 'learning_rate': 1.696303189799586e-08, 'epoch': 2.77}
 94%|█████████▍| 450/477 [1:36:59<05:06, 11.35s/it]2025-09-24 21:41:22,910 - INFO - Step 450: Train Loss = 0.2572
{'loss': 0.2572, 'grad_norm': 1.1253008842468262, 'learning_rate': 9.233835492104325e-09, 'epoch': 2.83}
 96%|█████████▋| 460/477 [1:38:54<03:15, 11.48s/it]2025-09-24 21:43:18,093 - INFO - Step 460: Train Loss = 0.2761
{'loss': 0.2761, 'grad_norm': 0.926703155040741, 'learning_rate': 3.822945956507006e-09, 'epoch': 2.9}
 99%|█████████▊| 470/477 [1:40:53<01:22, 11.81s/it]2025-09-24 21:45:16,535 - INFO - Step 470: Train Loss = 0.3055
{'loss': 0.3055, 'grad_norm': 1.3330585956573486, 'learning_rate': 7.559235341302873e-10, 'epoch': 2.96}
100%|██████████| 477/477 [1:42:08<00:00,  9.99s/it]
***** Running Evaluation *****
  Num examples = 469
  Batch size = 8
100%|██████████| 477/477 [1:42:22<00:00,  9.99s2025-09-24 21:46:45,894 - INFO - Step 477: Eval Loss = 0.2540
100%|██████████| 15/15 [00:13<00:00,  1.04it/s] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 0.253993421792984, 'eval_runtime': 14.3961, 'eval_samples_per_second': 32.578, 'eval_steps_per_second': 1.042, 'epoch': 3.0}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Deleting older checkpoint [/dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-318] due to args.save_total_limit


Training completed. Do not forget to share your model on huggingface.co/models =)


/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Loading best model from /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477 (score: 0.253993421792984).
Attempting to resume from /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/checkpoint-477
100%|██████████| 477/477 [1:49:02<00:00, 13.72s/it]
{'train_runtime': 6545.6885, 'train_samples_per_second': 4.648, 'train_steps_per_second': 0.073, 'train_loss': 0.3314263538244635, 'epoch': 3.0}
Custom impl., saving last checkpoint
 stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/special_tokens_map.json
Processing zero checkpoint '/dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70/global_step477'
Loading checkpoint shards: 100%|██████████| 4/4 [00:12<00:00,  3.03s/it]
Detected checkpoint of type zero stage ZeroStageEnum.weights, world_size: 4
Parsing checkpoint created by deepspeed==0.17.6
Gathering sharded weights: 100%|██████████| 399/399 [00:00<00:00, 865766.84it/s]
Reconstructed Trainable fp32 state dict with 399 params 8190735360 elements
Saving checkpoint shards: 100%|██████████| 7/7 [02:51<00:00, 24.49s/it]
Saved merged FP32 checkpoint to /dataset/common/huggingface/model/qwen3_8b_Toolace_ASIDE_SFTv70

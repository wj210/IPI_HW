wandb: Detected [huggingface_hub.inference, openai] in use.
wandb: Use W&B Weave for improved LLM call tracing. Install Weave with `pip install weave` then add `import weave` to the top of your script.
wandb: For more information, check out the docs at: https://weave-docs.wandb.ai/
  0%|          | 0/1123 [00:00<?, ?it/s]
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "jobs_for_jobsapi", "description": "This is the subfunction for tool \"jobsapi\", you can use this tool.The description of this function is: \"get's jobs\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "albums_for_march4", "description": "This is the subfunction for tool \"march4\", you can use this tool.The description of this function is: \"njnj\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "get_anything_for_httpbin", "description": "This is the subfunction for tool \"httpbin\", you can use this tool.The description of this function is: \"Forward to httpbin get_anything_for_httpbin endpoint\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "getinventory_for_privatepublicapi", "description": "This is the subfunction for tool \"privatepublicapi\", you can use this tool.The description of this function is: \"Returns a map of status codes to quantities\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "getorderbyid_for_privatepublicapi", "description": "This is the subfunction for tool \"privatepublicapi\", you can use this tool.The description of this function is: \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\"", "parameters": {"type": "object", "properties": {"orderid": {"type": "integer", "description": "ID of pet that needs to be fetched", "example_value": 0}}, "required": ["orderid"], "optional": []}}
{"name": "logoutuser_for_privatepublicapi", "description": "This is the subfunction for tool \"privatepublicapi\", you can use this tool.The description of this function is: \"Logs out current logged in user session\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I am passionate about photography and I want to improve my skills. Can you suggest some photography courses or workshops in my area and provide information about their curriculum and instructors? Additionally, it would be helpful to know if any of these courses offer hands-on practice and feedback.
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "jobs_for_jobsapi", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{'message': \"Endpoint '/api/job' does not exist\"}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "albums_for_march4", "arguments": {}}
</tool_call><|im_end|>

[2025-09-30 17:22:23,761] [WARNING] [stage3.py:2171:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:22:47,551] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:23:34,629] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:24:00,648] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:25:10,607] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:25:35,538] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 1.2226, 'grad_norm': 10.365160942077637, 'learning_rate': 4.000000000000001e-06, 'epoch': 0.01}
[2025-09-30 17:25:58,634] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 20/1123 [07:54<6:43:37, 21.96s/it]2025-09-30 17:29:20,514 - INFO - Step 20: Train Loss = 0.2201
[2025-09-30 17:26:20,801] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:27:32,567] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-30 17:28:16,046] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.2201, 'grad_norm': 1.0141968727111816, 'learning_rate': 8.444444444444446e-06, 'epoch': 0.02}
  3%|▎         | 30/1123 [11:25<6:22:01, 20.97s/it]2025-09-30 17:32:51,849 - INFO - Step 30: Train Loss = 0.1489
{'loss': 0.1489, 'grad_norm': 1.1104050874710083, 'learning_rate': 1.288888888888889e-05, 'epoch': 0.03}
  4%|▎         | 40/1123 [15:00<6:36:02, 21.94s/it]2025-09-30 17:36:26,149 - INFO - Step 40: Train Loss = 0.1360
{'loss': 0.136, 'grad_norm': 0.4517272412776947, 'learning_rate': 1.7333333333333336e-05, 'epoch': 0.04}
[2025-09-30 17:36:48,170] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 50/1123 [18:43<6:40:26, 22.39s/it]2025-09-30 17:40:09,059 - INFO - Step 50: Train Loss = 0.1347
{'loss': 0.1347, 'grad_norm': 1.166394591331482, 'learning_rate': 1.999932056597369e-05, 'epoch': 0.04}
  5%|▌         | 60/1123 [22:13<6:09:59, 20.88s/it]2025-09-30 17:43:39,070 - INFO - Step 60: Train Loss = 0.1286
{'loss': 0.1286, 'grad_norm': 0.619076669216156, 'learning_rate': 1.9991677993445832e-05, 'epoch': 0.05}
  6%|▌         | 70/1123 [25:39<6:03:19, 20.70s/it]2025-09-30 17:47:05,757 - INFO - Step 70: Train Loss = 0.1356
[2025-09-30 17:44:41,775] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.1356, 'grad_norm': 0.44803234934806824, 'learning_rate': 1.997555006789023e-05, 'epoch': 0.06}
  6%|▋         | 71/1123 [26:00<6:01:13, 20.60s/it]

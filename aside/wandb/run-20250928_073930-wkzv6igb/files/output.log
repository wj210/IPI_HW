wandb: Detected [huggingface_hub.inference, openai] in use.
wandb: Use W&B Weave for improved LLM call tracing. Install Weave with `pip install weave` then add `import weave` to the top of your script.
wandb: For more information, check out the docs at: https://weave-docs.wandb.ai/
  0%|          | 0/2246 [00:00<?, ?it/s]
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "jobs_for_jobsapi", "description": "This is the subfunction for tool \"jobsapi\", you can use this tool.The description of this function is: \"get's jobs\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "albums_for_march4", "description": "This is the subfunction for tool \"march4\", you can use this tool.The description of this function is: \"njnj\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "get_anything_for_httpbin", "description": "This is the subfunction for tool \"httpbin\", you can use this tool.The description of this function is: \"Forward to httpbin get_anything_for_httpbin endpoint\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "getinventory_for_privatepublicapi", "description": "This is the subfunction for tool \"privatepublicapi\", you can use this tool.The description of this function is: \"Returns a map of status codes to quantities\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "getorderbyid_for_privatepublicapi", "description": "This is the subfunction for tool \"privatepublicapi\", you can use this tool.The description of this function is: \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\"", "parameters": {"type": "object", "properties": {"orderid": {"type": "integer", "description": "ID of pet that needs to be fetched", "example_value": 0}}, "required": ["orderid"], "optional": []}}
{"name": "logoutuser_for_privatepublicapi", "description": "This is the subfunction for tool \"privatepublicapi\", you can use this tool.The description of this function is: \"Logs out current logged in user session\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I am passionate about photography and I want to improve my skills. Can you suggest some photography courses or workshops in my area and provide information about their curriculum and instructors? Additionally, it would be helpful to know if any of these courses offer hands-on practice and feedback.
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "jobs_for_jobsapi", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{'message': \"Endpoint '/api/job' does not exist\"}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "albums_for_march4", "arguments": {}}
</tool_call><|im_end|>

[2025-09-28 07:39:51,098] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:40:08,796] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:40:43,179] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:41:48,236] [WARNING] [stage3.py:2171:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:42:04,349] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 1.3201, 'grad_norm': 19.407405853271484, 'learning_rate': 2.0000000000000003e-06, 'epoch': 0.0}
[2025-09-28 07:42:37,005] [WARNING] [stage3.py:2171:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 20/2246 [05:24<9:35:37, 15.52s/it]2025-09-28 07:44:56,612 - INFO - Step 20: Train Loss = 0.4181
[2025-09-28 07:42:52,283] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:43:23,467] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:44:09,376] [WARNING] [stage3.py:2171:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:44:25,544] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-28 07:44:42,455] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.4181, 'grad_norm': 4.104569911956787, 'learning_rate': 4.222222222222223e-06, 'epoch': 0.01}
  1%|▏         | 30/2246 [08:02<10:00:02, 16.25s/it]2025-09-28 07:47:34,419 - INFO - Step 30: Train Loss = 0.1628
{'loss': 0.1628, 'grad_norm': 1.577465295791626, 'learning_rate': 6.444444444444445e-06, 'epoch': 0.01}
  2%|▏         | 40/2246 [10:38<9:34:18, 15.62s/it]2025-09-28 07:50:10,509 - INFO - Step 40: Train Loss = 0.1445
{'loss': 0.1445, 'grad_norm': 0.8160542249679565, 'learning_rate': 8.666666666666668e-06, 'epoch': 0.02}
  2%|▏         | 50/2246 [13:19<9:58:19, 16.35s/it]2025-09-28 07:52:52,019 - INFO - Step 50: Train Loss = 0.1427
{'loss': 0.1427, 'grad_norm': 0.8381587862968445, 'learning_rate': 1.088888888888889e-05, 'epoch': 0.02}
  3%|▎         | 60/2246 [15:57<9:41:20, 15.96s/it]2025-09-28 07:55:29,392 - INFO - Step 60: Train Loss = 0.1434
{'loss': 0.1434, 'grad_norm': 0.7471797466278076, 'learning_rate': 1.3111111111111113e-05, 'epoch': 0.03}
  3%|▎         | 70/2246 [18:28<9:14:33, 15.29s/it]2025-09-28 07:58:00,982 - INFO - Step 70: Train Loss = 0.1325
{'loss': 0.1325, 'grad_norm': 0.688834011554718, 'learning_rate': 1.5333333333333334e-05, 'epoch': 0.03}
  4%|▎         | 80/2246 [21:03<9:03:51, 15.07s/it]2025-09-28 08:00:35,593 - INFO - Step 80: Train Loss = 0.1423
{'loss': 0.1423, 'grad_norm': 0.6033757328987122, 'learning_rate': 1.7555555555555556e-05, 'epoch': 0.04}
  4%|▍         | 90/2246 [23:37<9:08:55, 15.28s/it]2025-09-28 08:03:09,171 - INFO - Step 90: Train Loss = 0.1461
{'loss': 0.1461, 'grad_norm': 0.5368313789367676, 'learning_rate': 1.977777777777778e-05, 'epoch': 0.04}
  4%|▍         | 100/2246 [26:17<9:36:02, 16.11s/it]2025-09-28 08:05:49,507 - INFO - Step 100: Train Loss = 0.1329
{'loss': 0.1329, 'grad_norm': 0.6340793967247009, 'learning_rate': 1.9999140093897013e-05, 'epoch': 0.04}
  5%|▍         | 110/2246 [28:57<9:40:33, 16.31s/it]2025-09-28 08:08:29,628 - INFO - Step 110: Train Loss = 0.1310
{'loss': 0.131, 'grad_norm': 0.5909268260002136, 'learning_rate': 1.9996167768838074e-05, 'epoch': 0.05}
  5%|▌         | 120/2246 [31:33<9:12:25, 15.59s/it]2025-09-28 08:11:05,629 - INFO - Step 120: Train Loss = 0.1437
{'loss': 0.1437, 'grad_norm': 0.773427426815033, 'learning_rate': 1.999107303963754e-05, 'epoch': 0.05}
  6%|▌         | 130/2246 [34:04<8:47:28, 14.96s/it]2025-09-28 08:13:37,069 - INFO - Step 130: Train Loss = 0.1493
{'loss': 0.1493, 'grad_norm': 0.9819635152816772, 'learning_rate': 1.9983856988017383e-05, 'epoch': 0.06}
  6%|▌         | 140/2246 [36:41<9:09:53, 15.67s/it]2025-09-28 08:16:13,902 - INFO - Step 140: Train Loss = 0.1366
{'loss': 0.1366, 'grad_norm': 0.6693825125694275, 'learning_rate': 1.9974521146102535e-05, 'epoch': 0.06}
  7%|▋         | 150/2246 [39:14<9:00:16, 15.47s/it]2025-09-28 08:18:46,793 - INFO - Step 150: Train Loss = 0.1300
{'loss': 0.13, 'grad_norm': 0.6102502346038818, 'learning_rate': 1.9963067496095578e-05, 'epoch': 0.07}
  7%|▋         | 160/2246 [41:50<9:02:35, 15.61s/it]2025-09-28 08:21:22,609 - INFO - Step 160: Train Loss = 0.1539
{'loss': 0.1539, 'grad_norm': 0.5056276321411133, 'learning_rate': 1.9949498469855878e-05, 'epoch': 0.07}
  8%|▊         | 170/2246 [44:22<8:46:50, 15.23s/it]2025-09-28 08:23:54,342 - INFO - Step 170: Train Loss = 0.1358
{'loss': 0.1358, 'grad_norm': 0.5511490106582642, 'learning_rate': 1.993381694838324e-05, 'epoch': 0.08}
  8%|▊         | 180/2246 [46:53<8:30:50, 14.84s/it]2025-09-28 08:26:25,480 - INFO - Step 180: Train Loss = 0.1274
{'loss': 0.1274, 'grad_norm': 0.5134553909301758, 'learning_rate': 1.9916026261206243e-05, 'epoch': 0.08}
  8%|▊         | 190/2246 [49:33<8:54:54, 15.61s/it]2025-09-28 08:29:05,944 - INFO - Step 190: Train Loss = 0.1418
{'loss': 0.1418, 'grad_norm': 0.5413215160369873, 'learning_rate': 1.9896130185675263e-05, 'epoch': 0.08}
  9%|▉         | 200/2246 [52:06<8:38:31, 15.21s/it]2025-09-28 08:31:38,723 - INFO - Step 200: Train Loss = 0.1423
{'loss': 0.1423, 'grad_norm': 1.0139437913894653, 'learning_rate': 1.9874132946160482e-05, 'epoch': 0.09}
  9%|▉         | 210/2246 [54:48<9:16:52, 16.41s/it]2025-09-28 08:34:20,147 - INFO - Step 210: Train Loss = 0.1485
{'loss': 0.1485, 'grad_norm': 0.6877260208129883, 'learning_rate': 1.9850039213154972e-05, 'epoch': 0.09}
 10%|▉         | 220/2246 [57:21<8:34:58, 15.25s/it]2025-09-28 08:36:53,790 - INFO - Step 220: Train Loss = 0.1366
{'loss': 0.1366, 'grad_norm': 0.744342565536499, 'learning_rate': 1.982385410228303e-05, 'epoch': 0.1}
 10%|█         | 230/2246 [1:00:03<8:55:36, 15.94s/it]2025-09-28 08:39:35,435 - INFO - Step 230: Train Loss = 0.1308
{'loss': 0.1308, 'grad_norm': 0.6692176461219788, 'learning_rate': 1.979558317321402e-05, 'epoch': 0.1}
 11%|█         | 240/2246 [1:02:39<8:51:39, 15.90s/it]2025-09-28 08:42:11,395 - INFO - Step 240: Train Loss = 0.1345
{'loss': 0.1345, 'grad_norm': 0.530731737613678, 'learning_rate': 1.9765232428481956e-05, 'epoch': 0.11}
 11%|█         | 250/2246 [1:05:16<8:34:32, 15.47s/it]2025-09-28 08:44:49,057 - INFO - Step 250: Train Loss = 0.1272
{'loss': 0.1272, 'grad_norm': 0.48875847458839417, 'learning_rate': 1.9732808312211e-05, 'epoch': 0.11}
 12%|█▏        | 260/2246 [1:07:54<8:54:28, 16.15s/it]2025-09-28 08:47:26,398 - INFO - Step 260: Train Loss = 0.1482
{'loss': 0.1482, 'grad_norm': 0.5098440647125244, 'learning_rate': 1.9698317708747267e-05, 'epoch': 0.12}
 12%|█▏        | 270/2246 [1:10:30<8:28:09, 15.43s/it]2025-09-28 08:50:02,651 - INFO - Step 270: Train Loss = 0.1179
{'loss': 0.1179, 'grad_norm': 0.6809920072555542, 'learning_rate': 1.966176794119709e-05, 'epoch': 0.12}
 12%|█▏        | 280/2246 [1:13:03<8:26:59, 15.47s/it]2025-09-28 08:52:35,651 - INFO - Step 280: Train Loss = 0.1177
{'loss': 0.1177, 'grad_norm': 0.574261486530304, 'learning_rate': 1.9623166769872216e-05, 'epoch': 0.12}
 13%|█▎        | 290/2246 [1:15:42<8:41:19, 15.99s/it]2025-09-28 08:55:14,206 - INFO - Step 290: Train Loss = 0.1324
{'loss': 0.1324, 'grad_norm': 0.4877588450908661, 'learning_rate': 1.9582522390642072e-05, 'epoch': 0.13}
 13%|█▎        | 300/2246 [1:18:16<8:26:28, 15.62s/it]2025-09-28 08:57:48,742 - INFO - Step 300: Train Loss = 0.1355
{'loss': 0.1355, 'grad_norm': 0.5427600741386414, 'learning_rate': 1.953984343319364e-05, 'epoch': 0.13}
 14%|█▍        | 310/2246 [1:20:49<8:11:55, 15.25s/it]2025-09-28 09:00:21,660 - INFO - Step 310: Train Loss = 0.1432
{'loss': 0.1432, 'grad_norm': 0.634048581123352, 'learning_rate': 1.9495138959199164e-05, 'epoch': 0.14}
 14%|█▍        | 320/2246 [1:23:22<8:06:03, 15.14s/it]2025-09-28 09:02:54,231 - INFO - Step 320: Train Loss = 0.1250
{'loss': 0.125, 'grad_norm': 0.48157447576522827, 'learning_rate': 1.9448418460392172e-05, 'epoch': 0.14}
 15%|█▍        | 330/2246 [1:26:01<8:21:13, 15.70s/it]2025-09-28 09:05:33,858 - INFO - Step 330: Train Loss = 0.1283
{'loss': 0.1283, 'grad_norm': 0.4943704605102539, 'learning_rate': 1.939969185655217e-05, 'epoch': 0.15}
 15%|█▌        | 340/2246 [1:28:41<8:34:16, 16.19s/it]2025-09-28 09:08:13,219 - INFO - Step 340: Train Loss = 0.1461
{'loss': 0.1461, 'grad_norm': 0.4588695168495178, 'learning_rate': 1.9348969493398456e-05, 'epoch': 0.15}
 16%|█▌        | 350/2246 [1:31:19<8:23:22, 15.93s/it]2025-09-28 09:10:51,252 - INFO - Step 350: Train Loss = 0.1368
{'loss': 0.1368, 'grad_norm': 0.6199558973312378, 'learning_rate': 1.9296262140393498e-05, 'epoch': 0.16}
 16%|█▌        | 360/2246 [1:33:55<8:15:43, 15.77s/it]2025-09-28 09:13:27,267 - INFO - Step 360: Train Loss = 0.1336
{'loss': 0.1336, 'grad_norm': 0.45887112617492676, 'learning_rate': 1.9241580988456347e-05, 'epoch': 0.16}
 16%|█▋        | 370/2246 [1:36:28<7:50:37, 15.05s/it]2025-09-28 09:16:00,871 - INFO - Step 370: Train Loss = 0.1227
{'loss': 0.1227, 'grad_norm': 0.8620448708534241, 'learning_rate': 1.918493764758656e-05, 'epoch': 0.16}
 17%|█▋        | 380/2246 [1:39:03<8:02:56, 15.53s/it]2025-09-28 09:18:35,591 - INFO - Step 380: Train Loss = 0.1211
{'loss': 0.1211, 'grad_norm': 0.5047296285629272, 'learning_rate': 1.9126344144399135e-05, 'epoch': 0.17}
 17%|█▋        | 390/2246 [1:41:41<8:08:41, 15.80s/it]2025-09-28 09:21:13,465 - INFO - Step 390: Train Loss = 0.1295
{'loss': 0.1295, 'grad_norm': 0.5284982323646545, 'learning_rate': 1.906581291957101e-05, 'epoch': 0.17}
 18%|█▊        | 400/2246 [1:44:13<7:51:21, 15.32s/it]2025-09-28 09:23:45,552 - INFO - Step 400: Train Loss = 0.1306
{'loss': 0.1306, 'grad_norm': 0.4592638611793518, 'learning_rate': 1.900335682519964e-05, 'epoch': 0.18}
 18%|█▊        | 410/2246 [1:46:48<8:04:26, 15.83s/it]2025-09-28 09:26:20,927 - INFO - Step 410: Train Loss = 0.1399
{'loss': 0.1399, 'grad_norm': 0.5535097122192383, 'learning_rate': 1.8938989122074195e-05, 'epoch': 0.18}
 19%|█▊        | 420/2246 [1:49:25<7:46:07, 15.32s/it]2025-09-28 09:28:57,758 - INFO - Step 420: Train Loss = 0.1477
{'loss': 0.1477, 'grad_norm': 0.5415207147598267, 'learning_rate': 1.8872723476860033e-05, 'epoch': 0.19}
 19%|█▉        | 430/2246 [1:52:05<8:03:33, 15.98s/it]2025-09-28 09:31:37,193 - INFO - Step 430: Train Loss = 0.1203
{'loss': 0.1203, 'grad_norm': 0.5236665606498718, 'learning_rate': 1.8804573959196944e-05, 'epoch': 0.19}
 20%|█▉        | 440/2246 [1:54:39<7:53:59, 15.75s/it]2025-09-28 09:34:11,788 - INFO - Step 440: Train Loss = 0.1407
{'loss': 0.1407, 'grad_norm': 0.6402688026428223, 'learning_rate': 1.873455503871188e-05, 'epoch': 0.2}
 20%|█▉        | 449/2246 [1:57:00<7:50:34, 15.71s/it]
***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "racecards_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"**Get races list.**\n\n- By default current day.\n- Or by date, setting it by parameter\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "race_detail_info_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"**Get race detailed info by ID {id_race}.**\n\nYou can get the \"id_race\" from Results or Racecards endpoints\"", "parameters": {"type": "object", "properties": {"id_race": {"type": "string", "description": "", "example_value": "53128"}}, "required": ["id_race"], "optional": []}}
{"name": "results_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"Get results races by date\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I'm a sports enthusiast and I'm interested in attending a greyhound race. Can you give me the race schedule for this week? I would like to know the dates, timings, and locations of the races. Additionally, I'm curious to learn more about a specific race with ID 53128, including the participating greyhounds and their details.
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>
 20%|█▉        | 449/2246 [1:57:30<7:50:34, 15.2025-09-28 09:37:02,682 - INFO - Step 449: Eval Loss = 0.1300
100%|██████████| 37/37 [00:29<00:00,  1.32it/s] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights

{'eval_loss': 0.12995176017284393, 'eval_runtime': 30.4562, 'eval_samples_per_second': 19.044, 'eval_steps_per_second': 1.215, 'epoch': 0.2}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_Vanilla_ToolBench_Chat_SFT_40k/checkpoint-449/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
 20%|██        | 450/2246 [2:01:42<47:41:58, 95.61s/it]2025-09-28 09:41:14,264 - INFO - Step 450: Train Loss = 0.1259
{'loss': 0.1259, 'grad_norm': 0.652337372303009, 'learning_rate': 1.866268158194673e-05, 'epoch': 0.2}
 20%|██        | 460/2246 [2:04:17<8:46:50, 17.70s/it]2025-09-28 09:43:49,656 - INFO - Step 460: Train Loss = 0.1234
{'loss': 0.1234, 'grad_norm': 0.5764569044113159, 'learning_rate': 1.8588968849201813e-05, 'epoch': 0.2}
 21%|██        | 470/2246 [2:06:53<7:46:28, 15.76s/it]2025-09-28 09:46:25,564 - INFO - Step 470: Train Loss = 0.1225
{'loss': 0.1225, 'grad_norm': 0.43462732434272766, 'learning_rate': 1.8513432491295825e-05, 'epoch': 0.21}
 21%|██▏       | 480/2246 [2:09:27<7:40:01, 15.63s/it]2025-09-28 09:48:59,785 - INFO - Step 480: Train Loss = 0.1206
{'loss': 0.1206, 'grad_norm': 0.6915041208267212, 'learning_rate': 1.843608854624278e-05, 'epoch': 0.21}
 22%|██▏       | 490/2246 [2:12:06<7:53:34, 16.18s/it]2025-09-28 09:51:38,909 - INFO - Step 490: Train Loss = 0.1429
{'loss': 0.1429, 'grad_norm': 0.7252466678619385, 'learning_rate': 1.835695343584683e-05, 'epoch': 0.22}
 22%|██▏       | 500/2246 [2:14:41<7:30:18, 15.47s/it]2025-09-28 09:54:13,874 - INFO - Step 500: Train Loss = 0.1352
{'loss': 0.1352, 'grad_norm': 0.5812581777572632, 'learning_rate': 1.8276043962215533e-05, 'epoch': 0.22}
 23%|██▎       | 510/2246 [2:17:15<7:11:17, 14.91s/it]2025-09-28 09:56:47,966 - INFO - Step 510: Train Loss = 0.1191
{'loss': 0.1191, 'grad_norm': 0.48490428924560547, 'learning_rate': 1.8193377304192413e-05, 'epoch': 0.23}
 23%|██▎       | 520/2246 [2:19:50<7:17:39, 15.21s/it]2025-09-28 09:59:22,219 - INFO - Step 520: Train Loss = 0.1244
{'loss': 0.1244, 'grad_norm': 0.47637075185775757, 'learning_rate': 1.8108971013709512e-05, 'epoch': 0.23}
 24%|██▎       | 530/2246 [2:22:19<7:08:44, 14.99s/it]2025-09-28 10:01:52,083 - INFO - Step 530: Train Loss = 0.1144
{'loss': 0.1144, 'grad_norm': 0.5522330403327942, 'learning_rate': 1.8022843012060733e-05, 'epoch': 0.24}
 24%|██▍       | 540/2246 [2:24:54<7:14:06, 15.27s/it]2025-09-28 10:04:26,769 - INFO - Step 540: Train Loss = 0.1162
{'loss': 0.1162, 'grad_norm': 0.5485684275627136, 'learning_rate': 1.793501158609676e-05, 'epoch': 0.24}
 24%|██▍       | 550/2246 [2:27:31<7:20:36, 15.59s/it]2025-09-28 10:07:03,709 - INFO - Step 550: Train Loss = 0.1437
{'loss': 0.1437, 'grad_norm': 0.5494635701179504, 'learning_rate': 1.7845495384342362e-05, 'epoch': 0.24}
 25%|██▍       | 560/2246 [2:30:00<7:02:57, 15.05s/it]2025-09-28 10:09:32,694 - INFO - Step 560: Train Loss = 0.1207
{'loss': 0.1207, 'grad_norm': 0.4558725357055664, 'learning_rate': 1.7754313413036907e-05, 'epoch': 0.25}
 25%|██▌       | 570/2246 [2:32:35<7:17:04, 15.65s/it]2025-09-28 10:12:07,998 - INFO - Step 570: Train Loss = 0.1520
{'loss': 0.152, 'grad_norm': 0.557611346244812, 'learning_rate': 1.766148503209891e-05, 'epoch': 0.25}
 26%|██▌       | 580/2246 [2:35:07<7:15:51, 15.70s/it]2025-09-28 10:14:40,104 - INFO - Step 580: Train Loss = 0.1290
{'loss': 0.129, 'grad_norm': 0.45694485306739807, 'learning_rate': 1.7567029951015527e-05, 'epoch': 0.26}
 26%|██▋       | 590/2246 [2:37:44<7:06:59, 15.47s/it]2025-09-28 10:17:16,223 - INFO - Step 590: Train Loss = 0.1142
{'loss': 0.1142, 'grad_norm': 0.406311571598053, 'learning_rate': 1.747096822465777e-05, 'epoch': 0.26}
 27%|██▋       | 600/2246 [2:40:20<7:17:20, 15.94s/it]2025-09-28 10:19:52,816 - INFO - Step 600: Train Loss = 0.1302
{'loss': 0.1302, 'grad_norm': 0.506977379322052, 'learning_rate': 1.737332024902245e-05, 'epoch': 0.27}
 27%|██▋       | 610/2246 [2:42:53<6:48:07, 14.97s/it]2025-09-28 10:22:25,547 - INFO - Step 610: Train Loss = 0.1305
{'loss': 0.1305, 'grad_norm': 0.4901888966560364, 'learning_rate': 1.7274106756901633e-05, 'epoch': 0.27}
 28%|██▊       | 620/2246 [2:45:27<6:53:26, 15.26s/it]2025-09-28 10:24:59,876 - INFO - Step 620: Train Loss = 0.1138
{'loss': 0.1138, 'grad_norm': 0.4016268849372864, 'learning_rate': 1.717334881348065e-05, 'epoch': 0.28}
 28%|██▊       | 630/2246 [2:48:04<7:13:11, 16.08s/it]2025-09-28 10:27:36,365 - INFO - Step 630: Train Loss = 0.1203
{'loss': 0.1203, 'grad_norm': 0.5784021019935608, 'learning_rate': 1.7071067811865477e-05, 'epoch': 0.28}
 28%|██▊       | 640/2246 [2:50:41<6:47:03, 15.21s/it]2025-09-28 10:30:13,109 - INFO - Step 640: Train Loss = 0.1220
{'loss': 0.122, 'grad_norm': 0.41678375005722046, 'learning_rate': 1.696728546854051e-05, 'epoch': 0.29}
 29%|██▉       | 650/2246 [2:53:18<7:04:37, 15.96s/it]2025-09-28 10:32:50,489 - INFO - Step 650: Train Loss = 0.1215
{'loss': 0.1215, 'grad_norm': 0.4490166902542114, 'learning_rate': 1.6862023818757702e-05, 'epoch': 0.29}
 29%|██▉       | 660/2246 [2:55:58<7:06:25, 16.13s/it]2025-09-28 10:35:30,870 - INFO - Step 660: Train Loss = 0.1113
{'loss': 0.1113, 'grad_norm': 0.4738200306892395, 'learning_rate': 1.675530521185798e-05, 'epoch': 0.29}
 30%|██▉       | 670/2246 [2:58:38<7:10:48, 16.40s/it]2025-09-28 10:38:10,162 - INFO - Step 670: Train Loss = 0.1141
{'loss': 0.1141, 'grad_norm': 0.6542661190032959, 'learning_rate': 1.6647152306526005e-05, 'epoch': 0.3}
 30%|███       | 680/2246 [3:01:15<6:34:31, 15.12s/it]2025-09-28 10:40:47,316 - INFO - Step 680: Train Loss = 0.1280
{'loss': 0.128, 'grad_norm': 0.5246407985687256, 'learning_rate': 1.6537588065979228e-05, 'epoch': 0.3}
 31%|███       | 690/2246 [3:03:52<6:47:27, 15.71s/it]2025-09-28 10:43:24,809 - INFO - Step 690: Train Loss = 0.1276
{'loss': 0.1276, 'grad_norm': 0.4402780532836914, 'learning_rate': 1.6426635753092313e-05, 'epoch': 0.31}
 31%|███       | 700/2246 [3:06:25<6:33:04, 15.25s/it]2025-09-28 10:45:57,648 - INFO - Step 700: Train Loss = 0.1284
{'loss': 0.1284, 'grad_norm': 0.48992931842803955, 'learning_rate': 1.631431892545791e-05, 'epoch': 0.31}
 32%|███▏      | 710/2246 [3:09:00<6:38:04, 15.55s/it]2025-09-28 10:48:33,042 - INFO - Step 710: Train Loss = 0.1185
{'loss': 0.1185, 'grad_norm': 0.40127235651016235, 'learning_rate': 1.6200661430384886e-05, 'epoch': 0.32}
 32%|███▏      | 720/2246 [3:11:38<6:34:22, 15.51s/it]2025-09-28 10:51:11,097 - INFO - Step 720: Train Loss = 0.1039
{'loss': 0.1039, 'grad_norm': 0.4026399850845337, 'learning_rate': 1.608568739983498e-05, 'epoch': 0.32}
 33%|███▎      | 730/2246 [3:14:13<6:27:10, 15.32s/it]2025-09-28 10:53:45,190 - INFO - Step 730: Train Loss = 0.1153
{'loss': 0.1153, 'grad_norm': 0.3840164244174957, 'learning_rate': 1.5969421245299106e-05, 'epoch': 0.33}
 33%|███▎      | 740/2246 [3:16:49<6:32:16, 15.63s/it]2025-09-28 10:56:21,672 - INFO - Step 740: Train Loss = 0.1118
{'loss': 0.1118, 'grad_norm': 0.5152560472488403, 'learning_rate': 1.5851887652614238e-05, 'epoch': 0.33}
 33%|███▎      | 750/2246 [3:19:23<6:13:01, 14.96s/it]2025-09-28 10:58:55,782 - INFO - Step 750: Train Loss = 0.1197
{'loss': 0.1197, 'grad_norm': 1.0388075113296509, 'learning_rate': 1.5733111576722078e-05, 'epoch': 0.33}
 34%|███▍      | 760/2246 [3:22:01<6:37:01, 16.03s/it]2025-09-28 11:01:33,697 - INFO - Step 760: Train Loss = 0.1261
{'loss': 0.1261, 'grad_norm': 0.4434112310409546, 'learning_rate': 1.561311823637057e-05, 'epoch': 0.34}
 34%|███▍      | 770/2246 [3:24:34<6:13:03, 15.17s/it]2025-09-28 11:04:07,071 - INFO - Step 770: Train Loss = 0.1260
{'loss': 0.126, 'grad_norm': 0.44250422716140747, 'learning_rate': 1.5491933108759417e-05, 'epoch': 0.34}
 35%|███▍      | 780/2246 [3:27:10<6:19:03, 15.51s/it]2025-09-28 11:06:42,676 - INFO - Step 780: Train Loss = 0.1213
{'loss': 0.1213, 'grad_norm': 0.41688084602355957, 'learning_rate': 1.5369581924130724e-05, 'epoch': 0.35}
 35%|███▌      | 790/2246 [3:29:45<6:25:24, 15.88s/it]2025-09-28 11:09:17,410 - INFO - Step 790: Train Loss = 0.1126
{'loss': 0.1126, 'grad_norm': 0.8674556016921997, 'learning_rate': 1.5246090660305883e-05, 'epoch': 0.35}
 36%|███▌      | 800/2246 [3:32:25<6:27:02, 16.06s/it]2025-09-28 11:11:58,057 - INFO - Step 800: Train Loss = 0.1527
{'loss': 0.1527, 'grad_norm': 0.35049968957901, 'learning_rate': 1.5121485537169945e-05, 'epoch': 0.36}
 36%|███▌      | 810/2246 [3:35:02<6:14:02, 15.63s/it]2025-09-28 11:14:34,787 - INFO - Step 810: Train Loss = 0.1133
{'loss': 0.1133, 'grad_norm': 0.4874666929244995, 'learning_rate': 1.4995793011104543e-05, 'epoch': 0.36}
 37%|███▋      | 820/2246 [3:37:38<6:08:16, 15.50s/it]2025-09-28 11:17:10,548 - INFO - Step 820: Train Loss = 0.1241
{'loss': 0.1241, 'grad_norm': 0.9225244522094727, 'learning_rate': 1.4869039769370646e-05, 'epoch': 0.37}
 37%|███▋      | 830/2246 [3:40:13<6:06:28, 15.53s/it]2025-09-28 11:19:45,841 - INFO - Step 830: Train Loss = 0.1116
{'loss': 0.1116, 'grad_norm': 0.45864540338516235, 'learning_rate': 1.4741252724442253e-05, 'epoch': 0.37}
 37%|███▋      | 833/2246 [3:41:03<6:18:47, 16.08s/it]

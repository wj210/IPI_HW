wandb: Detected [huggingface_hub.inference, openai] in use.
wandb: Use W&B Weave for improved LLM call tracing. Install Weave with `pip install weave` then add `import weave` to the top of your script.
wandb: For more information, check out the docs at: https://weave-docs.wandb.ai/
  0%|          | 0/313 [00:00<?, ?it/s]
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "comment_search_for_socialgrep", "description": "This is the subfunction for tool \"socialgrep\", you can use this tool.The description of this function is: \"Searches Reddit comments.\"", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The comma-separated query for the search. Supports the following term types:\n\n`/r/{subreddit}` - search only comments from the subreddit {subreddit}.\n\n`-/r/{subreddit}` - search only comments not from the subreddit {subreddit}.\n\n`{term}` - search only comm", "example_value": "/r/funny,cat"}, "after": {"type": "integer", "description": "The previous result's `sort_key` value. Used for pagination."}}, "required": ["query"], "optional": ["after"]}}
{"name": "post_search_for_socialgrep", "description": "This is the subfunction for tool \"socialgrep\", you can use this tool.The description of this function is: \"Searches Reddit posts.\"", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The comma-separated query for the search. Supports the following term types:\n\n`site:{site_name}` - search only posts where the domain matches {site_name}.\n\n`-site:{site_name}` - search only posts where the domain does not match {site_name}.\n\n`/r/{subreddit", "example_value": "/r/funny,cat"}, "after": {"type": "integer", "description": "The previous result's `sort_key` value. Used for pagination."}}, "required": ["query"], "optional": ["after"]}}
{"name": "soundcloud_for_check_username", "description": "This is the subfunction for tool \"check_username\", you can use this tool.The description of this function is: \"Check username on soundcloud_for_check_username\"", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "", "example_value": "username"}}, "required": ["username"], "optional": []}}
{"name": "linktree_for_check_username", "description": "This is the subfunction for tool \"check_username\", you can use this tool.The description of this function is: \"Check username on linktree_for_check_username\"", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "", "example_value": "username"}}, "required": ["username"], "optional": []}}
{"name": "pinterest_for_check_username", "description": "This is the subfunction for tool \"check_username\", you can use this tool.The description of this function is: \"Check username on pinterest_for_check_username\"", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "", "example_value": "username"}}, "required": ["username"], "optional": []}}
{"name": "top_memes_for_reddit_meme", "description": "This is the subfunction for tool \"reddit_meme\", you can use this tool.The description of this function is: \"Use this route to get the all top quality memes from subreddit\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "trending_memes_for_reddit_meme", "description": "This is the subfunction for tool \"reddit_meme\", you can use this tool.The description of this function is: \"Use this route to get the newest trending memes from subreddit\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I'm organizing a charity event and I want to create some buzz on social media. Can you fetch the newest trending memes from Reddit? Additionally, check if the username 'charitychampion' is available on Soundcloud, Linktree, and Pinterest. Thank you for your support!
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "trending_memes_for_reddit_meme", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "[{\"created_utc\":1643524062,\"title\":\"Sad aliens noises\",\"url\":\"https://i.redd.it/tmd5shz9rre81.gif\",\"subreddit\":\"memes\"},{\"created_utc\":1643530657,\"title\":\"Pro gamer move\",\"url\":\"https://i.redd.it/qqjykysxase81.gif\",\"subreddit\":\"memes\"}]"}
</tool_response><|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "soundcloud_for_check_username", "arguments": {"username": "charitychampion"}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "Rate limit error...", "response": "{'message': 'You have exceeded the MONTHLY quota for Check usernames on your current plan, BASIC. Upgrade your plan at https://rapidapi.com/Bmbus/api/check-username'}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "linktree_for_check_username", "arguments": {"username": "charitychampion"}}
</tool_call><|im_end|>

Rotated chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "trending_memes_for_reddit_meme", "arguments": {}}
</tool_call><|im_end|>
Rotated chunk 1: <|im_start|>user
<tool_response>
{"error": "", "response": "[{\"created_utc\":1643524062,\"title\":\"Sad aliens noises\",\"url\":\"https://i.redd.it/tmd5shz9rre81.gif\",\"subreddit\":\"memes\"},{\"created_utc\":1643530657,\"title\":\"Pro gamer move\",\"url\":\"https://i.redd.it/qqjykysxase81.gif\",\"subreddit\":\"memes\"}]"}
</tool_response><|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "soundcloud_for_check_username", "arguments": {"username": "charitychampion"}}
</tool_call><|im_end|>
Rotated chunk 2: <|im_start|>user
<tool_response>
{"error": "Rate limit error...", "response": "{'message': 'You have exceeded the MONTHLY quota for Check usernames on your current plan, BASIC. Upgrade your plan at https://rapidapi.com/Bmbus/api/check-username'}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "linktree_for_check_username", "arguments": {"username": "charitychampion"}}
</tool_call><|im_end|>
Assistant loss chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "trending_memes_for_reddit_meme", "arguments": {}}
</tool_call><|im_end|>
Assistant loss chunk 1: <|im_start|>user
<tool_response>
{"error": "", "response": "[{\"created_utc\":1643524062,\"title\":\"Sad aliens noises\",\"url\":\"https://i.redd.it/tmd5shz9rre81.gif\",\"subreddit\":\"memes\"},{\"created_utc\":1643530657,\"title\":\"Pro gamer move\",\"url\":\"https://i.redd.it/qqjykysxase81.gif\",\"subreddit\":\"memes\"}]"}
</tool_response><|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "soundcloud_for_check_username", "arguments": {"username": "charitychampion"}}
</tool_call><|im_end|>
Assistant loss chunk 2: <|im_start|>user
<tool_response>
{"error": "Rate limit error...", "response": "{'message': 'You have exceeded the MONTHLY quota for Check usernames on your current plan, BASIC. Upgrade your plan at https://rapidapi.com/Bmbus/api/check-username'}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "linktree_for_check_username", "arguments": {"username": "charitychampion"}}
</tool_call><|im_end|>
[2025-09-29 07:50:14,494] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 10/313 [08:34<4:16:29, 50.79s/it]2025-09-29 07:57:52,115 - INFO - Step 10: Train Loss = 24.5147
[2025-09-29 07:51:11,474] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-09-29 07:57:04,925] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 24.5147, 'grad_norm': 431.9493103027344, 'learning_rate': 1.3846153846153844e-06, 'epoch': 0.03}
  6%|▋         | 20/313 [16:50<4:02:49, 49.72s/it]2025-09-29 08:06:08,093 - INFO - Step 20: Train Loss = 14.2156
{'loss': 14.2156, 'grad_norm': 73.96110534667969, 'learning_rate': 1.9980267284282714e-06, 'epoch': 0.06}
 10%|▉         | 30/313 [24:58<3:50:20, 48.84s/it]2025-09-29 08:14:16,068 - INFO - Step 30: Train Loss = 7.8222
{'loss': 7.8222, 'grad_norm': 26.46873664855957, 'learning_rate': 1.985996037070505e-06, 'epoch': 0.1}
 13%|█▎        | 40/313 [32:55<3:38:22, 47.99s/it]2025-09-29 08:22:12,822 - INFO - Step 40: Train Loss = 6.3007
{'loss': 6.3007, 'grad_norm': 12.26945686340332, 'learning_rate': 1.963162566797658e-06, 'epoch': 0.13}
 16%|█▌        | 50/313 [40:57<3:29:43, 47.84s/it]2025-09-29 08:30:15,260 - INFO - Step 50: Train Loss = 5.4373
{'loss': 5.4373, 'grad_norm': 7.4815993309021, 'learning_rate': 1.929776485888251e-06, 'epoch': 0.16}
 19%|█▉        | 60/313 [48:56<3:21:46, 47.85s/it]2025-09-29 08:38:14,495 - INFO - Step 60: Train Loss = 4.6536
[2025-09-29 08:36:40,510] [WARNING] [stage3.py:2171:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 4.6536, 'grad_norm': 7.064022064208984, 'learning_rate': 1.8862035792312146e-06, 'epoch': 0.19}
 20%|█▉        | 62/313 [50:33<3:21:25, 48.15s/it]
***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "racecards_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"**Get races list.**\n\n- By default current day.\n- Or by date, setting it by parameter\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "race_detail_info_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"**Get race detailed info by ID {id_race}.**\n\nYou can get the \"id_race\" from Results or Racecards endpoints\"", "parameters": {"type": "object", "properties": {"id_race": {"type": "string", "description": "", "example_value": "53128"}}, "required": ["id_race"], "optional": []}}
{"name": "results_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"Get results races by date\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I'm a sports enthusiast and I'm interested in attending a greyhound race. Can you give me the race schedule for this week? I would like to know the dates, timings, and locations of the races. Additionally, I'm curious to learn more about a specific race with ID 53128, including the participating greyhounds and their details.
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>

Rotated chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
Rotated chunk 1: <|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>
Assistant loss chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
Assistant loss chunk 1: <|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>
 20%|█▉        | 62/313 [51:30<3:21:25, 48.15s/2025-09-29 08:40:48,074 - INFO - Step 62: Eval Loss = 4.2508
100%|██████████| 19/19 [00:54<00:00,  2.71s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 4.250833988189697, 'eval_runtime': 56.9421, 'eval_samples_per_second': 10.186, 'eval_steps_per_second': 0.334, 'epoch': 0.2}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
 22%|██▏       | 70/313 [1:01:40<3:41:33, 54.70s/it]2025-09-29 08:50:58,175 - INFO - Step 70: Train Loss = 4.1158
{'loss': 4.1158, 'grad_norm': 5.72199010848999, 'learning_rate': 1.8329212407100993e-06, 'epoch': 0.22}
 26%|██▌       | 80/313 [1:09:31<3:00:54, 46.59s/it]2025-09-29 08:58:48,866 - INFO - Step 80: Train Loss = 3.8186
{'loss': 3.8186, 'grad_norm': 6.784010410308838, 'learning_rate': 1.7705132427757892e-06, 'epoch': 0.26}
 29%|██▉       | 90/313 [1:17:23<2:54:10, 46.86s/it]2025-09-29 09:06:40,674 - INFO - Step 90: Train Loss = 3.5921
{'loss': 3.5921, 'grad_norm': 7.615959644317627, 'learning_rate': 1.6996633405133653e-06, 'epoch': 0.29}
 32%|███▏      | 100/313 [1:25:25<2:55:47, 49.52s/it]2025-09-29 09:14:43,198 - INFO - Step 100: Train Loss = 3.4309
{'loss': 3.4309, 'grad_norm': 6.007251262664795, 'learning_rate': 1.6211477802783102e-06, 'epoch': 0.32}
 35%|███▌      | 110/313 [1:36:40<2:55:56, 52.00s/it]2025-09-29 09:25:57,840 - INFO - Step 110: Train Loss = 3.2851
{'loss': 3.2851, 'grad_norm': 4.299454689025879, 'learning_rate': 1.5358267949789964e-06, 'epoch': 0.35}
 38%|███▊      | 120/313 [1:44:29<2:30:50, 46.90s/it]2025-09-29 09:33:47,344 - INFO - Step 120: Train Loss = 3.2130
{'loss': 3.213, 'grad_norm': 4.638444900512695, 'learning_rate': 1.4446351791849273e-06, 'epoch': 0.38}
 40%|███▉      | 124/313 [1:47:42<2:31:32, 48.11s/it]
***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
 40%|███▉      | 124/313 [1:48:37<2:31:32, 48.12025-09-29 09:37:55,128 - INFO - Step 124: Eval Loss = 3.0574
100%|██████████| 19/19 [00:52<00:00,  2.66s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 3.0574324131011963, 'eval_runtime': 54.9367, 'eval_samples_per_second': 10.558, 'eval_steps_per_second': 0.346, 'epoch': 0.4}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Deleting older checkpoint [/dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-62] due to args.save_total_limit
 42%|████▏     | 130/313 [1:57:11<3:08:01, 61.65s/it]2025-09-29 09:46:29,185 - INFO - Step 130: Train Loss = 3.0473
{'loss': 3.0473, 'grad_norm': 5.724915504455566, 'learning_rate': 1.3485720473218152e-06, 'epoch': 0.42}
 45%|████▍     | 140/313 [2:04:57<2:15:08, 46.87s/it]2025-09-29 09:54:15,358 - INFO - Step 140: Train Loss = 3.0139
{'loss': 3.0139, 'grad_norm': 4.020380973815918, 'learning_rate': 1.2486898871648551e-06, 'epoch': 0.45}
 48%|████▊     | 150/313 [2:12:49<2:08:59, 47.48s/it]2025-09-29 10:02:07,112 - INFO - Step 150: Train Loss = 2.9290
{'loss': 2.929, 'grad_norm': 6.094847202301025, 'learning_rate': 1.1460830285624116e-06, 'epoch': 0.48}
 51%|█████     | 160/313 [2:20:40<2:01:26, 47.62s/it]2025-09-29 10:09:57,879 - INFO - Step 160: Train Loss = 2.9105
{'loss': 2.9105, 'grad_norm': 3.659965753555298, 'learning_rate': 1.0418756537291995e-06, 'epoch': 0.51}
 54%|█████▍    | 170/313 [2:28:38<1:54:04, 47.86s/it]2025-09-29 10:17:55,900 - INFO - Step 170: Train Loss = 2.8692
{'loss': 2.8692, 'grad_norm': 5.078826904296875, 'learning_rate': 9.372094804706866e-07, 'epoch': 0.54}
 58%|█████▊    | 180/313 [2:36:37<1:46:57, 48.25s/it]2025-09-29 10:25:55,364 - INFO - Step 180: Train Loss = 2.8894
{'loss': 2.8894, 'grad_norm': 4.834016799926758, 'learning_rate': 8.332312532838978e-07, 'epoch': 0.58}
 59%|█████▉    | 186/313 [2:41:17<1:39:55, 47.21s/it]
***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
 59%|█████▉    | 186/313 [2:42:11<1:39:55, 47.22025-09-29 10:31:29,219 - INFO - Step 186: Eval Loss = 2.7443
100%|██████████| 19/19 [00:51<00:00,  2.63s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 2.744274377822876, 'eval_runtime': 53.8769, 'eval_samples_per_second': 10.765, 'eval_steps_per_second': 0.353, 'epoch': 0.6}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-186/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Deleting older checkpoint [/dataset/common/huggingface/model/qwen3_8b_ASIDE_ToolBench_Chat_SFT_40k/checkpoint-124] due to args.save_total_limit
 61%|██████    | 190/313 [2:49:13<2:38:01, 77.09s/it]2025-09-29 10:38:31,552 - INFO - Step 190: Train Loss = 2.7435
{'loss': 2.7435, 'grad_norm': 5.014434814453125, 'learning_rate': 7.310801793847343e-07, 'epoch': 0.61}
 64%|██████▍   | 200/313 [2:57:12<1:31:49, 48.76s/it]2025-09-29 10:46:29,834 - INFO - Step 200: Train Loss = 2.8174
{'loss': 2.8174, 'grad_norm': 4.35236930847168, 'learning_rate': 6.31875447315322e-07, 'epoch': 0.64}
 67%|██████▋   | 210/313 [3:05:06<1:22:05, 47.82s/it]2025-09-29 10:54:24,002 - INFO - Step 210: Train Loss = 2.7128
{'loss': 2.7128, 'grad_norm': 4.8873820304870605, 'learning_rate': 5.367039648801385e-07, 'epoch': 0.67}
 70%|███████   | 220/313 [3:12:59<1:13:25, 47.37s/it]2025-09-29 11:02:17,429 - INFO - Step 220: Train Loss = 2.8223
{'loss': 2.8223, 'grad_norm': 4.6182098388671875, 'learning_rate': 4.46608450756656e-07, 'epoch': 0.7}
 71%|███████   | 223/313 [3:15:23<1:11:50, 47.90s/it]

wandb: Detected [huggingface_hub.inference, openai] in use.
wandb: Use W&B Weave for improved LLM call tracing. Install Weave with `pip install weave` then add `import weave` to the top of your script.
wandb: For more information, check out the docs at: https://weave-docs.wandb.ai/
  0%|          | 0/625 [00:00<?, ?it/s]
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "random_for_manatee_jokes", "description": "This is the subfunction for tool \"manatee_jokes\", you can use this tool.The description of this function is: \"retrieves a random_for_manatee_jokes manatee joke\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "get_by_id_for_manatee_jokes", "description": "This is the subfunction for tool \"manatee_jokes\", you can use this tool.The description of this function is: \"gets a specific joke by id\"", "parameters": {"type": "object", "properties": {"is_id": {"type": "string", "description": ""}}, "required": ["is_id"], "optional": []}}
{"name": "find_all_for_manatee_jokes", "description": "This is the subfunction for tool \"manatee_jokes\", you can use this tool.The description of this function is: \"retrieves all available jokes\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "get_joke_of_the_day_for_world_of_jokes", "description": "This is the subfunction for tool \"world_of_jokes\", you can use this tool.The description of this function is: \"Get the joke of the day from a collection of most rated and most popular jokes.\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "get_random_joke_for_world_of_jokes", "description": "This is the subfunction for tool \"world_of_jokes\", you can use this tool.The description of this function is: \"Get the random joke from a collection of most rated and most popular jokes.\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "get_joke_of_the_day_by_category_for_world_of_jokes", "description": "This is the subfunction for tool \"world_of_jokes\", you can use this tool.The description of this function is: \"Get the joke of the day of specific category from a collection of most rated and most popular jokes.\"", "parameters": {"type": "object", "properties": {"category": {"type": "string", "description": "Category of joke based on the jokes categories API", "example_value": "Money"}}, "required": ["category"], "optional": []}}
{"name": "v1_memes_for_programming_memes_images", "description": "This is the subfunction for tool \"programming_memes_images\", you can use this tool.The description of this function is: \"Get Random Programming Memes\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I am planning a team-building event for my company and I want to incorporate humor. Can you provide me with a random manatee joke, the joke of the day from the World of Jokes API, and a programming meme? Your assistance in making this event fun and engaging is highly valued.
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "random_for_manatee_jokes", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{\"id\":9,\"setup\":\"What is AC/DC number one hit undersea?\",\"punchline\":\"ManaTNT\",\"createdAt\":\"2020-12-23T19:40:08.000Z\",\"updatedAt\":\"2020-12-23T19:40:08.000Z\"}"}
</tool_response><|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "get_joke_of_the_day_for_world_of_jokes", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{'body': \"There's no turning back now\", 'title': 'Yesterday I got dared to have surgery that prevented me from moving my neck...', 'category': 'Miscellaneous'}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "v1_memes_for_programming_memes_images", "arguments": {}}
</tool_call><|im_end|>

Rotated chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "random_for_manatee_jokes", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{\"id\":9,\"setup\":\"What is AC/DC number one hit undersea?\",\"punchline\":\"ManaTNT\",\"createdAt\":\"2020-12-23T19:40:08.000Z\",\"updatedAt\":\"2020-12-23T19:40:08.000Z\"}"}
</tool_response><|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "get_joke_of_the_day_for_world_of_jokes", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{'body': \"There's no turning back now\", 'title': 'Yesterday I got dared to have surgery that prevented me from moving my neck...', 'category': 'Miscellaneous'}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "v1_memes_for_programming_memes_images", "arguments": {}}
</tool_call><|im_end|>

Assistant loss chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "random_for_manatee_jokes", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{\"id\":9,\"setup\":\"What is AC/DC number one hit undersea?\",\"punchline\":\"ManaTNT\",\"createdAt\":\"2020-12-23T19:40:08.000Z\",\"updatedAt\":\"2020-12-23T19:40:08.000Z\"}"}
</tool_response><|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "get_joke_of_the_day_for_world_of_jokes", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "{'body': \"There's no turning back now\", 'title': 'Yesterday I got dared to have surgery that prevented me from moving my neck...', 'category': 'Miscellaneous'}"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "v1_memes_for_programming_memes_images", "arguments": {}}
</tool_call><|im_end|>
  2%|▏         | 10/625 [06:01<5:58:09, 34.94s/it]2025-09-29 11:15:55,128 - INFO - Step 10: Train Loss = 1.5916

[2025-09-29 11:11:49,643] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 1.5916, 'grad_norm': 3.595468759536743, 'learning_rate': 7.2000000000000005e-06, 'epoch': 0.02}
  3%|▎         | 20/625 [11:49<5:48:34, 34.57s/it]2025-09-29 11:21:43,439 - INFO - Step 20: Train Loss = 0.7655
{'loss': 0.7655, 'grad_norm': 0.6201268434524536, 'learning_rate': 1.5200000000000002e-05, 'epoch': 0.03}
  5%|▍         | 30/625 [17:28<5:32:50, 33.56s/it]2025-09-29 11:27:22,509 - INFO - Step 30: Train Loss = 0.5502
{'loss': 0.5502, 'grad_norm': 0.41613122820854187, 'learning_rate': 1.9997806834748455e-05, 'epoch': 0.05}
  6%|▋         | 40/625 [23:01<5:26:26, 33.48s/it]2025-09-29 11:32:55,852 - INFO - Step 40: Train Loss = 0.4744
{'loss': 0.4744, 'grad_norm': 0.3650663495063782, 'learning_rate': 1.997314477224458e-05, 'epoch': 0.06}
  8%|▊         | 50/625 [28:38<5:22:41, 33.67s/it]2025-09-29 11:38:32,949 - INFO - Step 50: Train Loss = 0.4421
{'loss': 0.4421, 'grad_norm': 0.3441537916660309, 'learning_rate': 1.9921147013144782e-05, 'epoch': 0.08}
 10%|▉         | 60/625 [34:16<5:19:57, 33.98s/it]2025-09-29 11:44:11,015 - INFO - Step 60: Train Loss = 0.4127
[2025-09-29 11:44:11,003] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.4127, 'grad_norm': 0.3668022155761719, 'learning_rate': 1.984195607969242e-05, 'epoch': 0.1}
 11%|█         | 70/625 [39:57<5:17:30, 34.32s/it]2025-09-29 11:49:52,055 - INFO - Step 70: Train Loss = 0.3706
{'loss': 0.3706, 'grad_norm': 0.35019657015800476, 'learning_rate': 1.9735789028731603e-05, 'epoch': 0.11}
 13%|█▎        | 80/625 [45:39<5:08:42, 33.99s/it]2025-09-29 11:55:34,001 - INFO - Step 80: Train Loss = 0.3595
{'loss': 0.3595, 'grad_norm': 0.35251733660697937, 'learning_rate': 1.9602936856769432e-05, 'epoch': 0.13}
 14%|█▍        | 90/625 [51:14<4:58:00, 33.42s/it]2025-09-29 12:01:08,593 - INFO - Step 90: Train Loss = 0.3458
{'loss': 0.3458, 'grad_norm': 0.37177085876464844, 'learning_rate': 1.944376370237481e-05, 'epoch': 0.14}
 16%|█▌        | 100/625 [56:45<4:49:30, 33.09s/it]2025-09-29 12:06:39,687 - INFO - Step 100: Train Loss = 0.3118
{'loss': 0.3118, 'grad_norm': 0.3440742492675781, 'learning_rate': 1.925870584809995e-05, 'epoch': 0.16}
 18%|█▊        | 110/625 [1:02:19<4:47:38, 33.51s/it]2025-09-29 12:12:13,414 - INFO - Step 110: Train Loss = 0.3000
{'loss': 0.3, 'grad_norm': 0.39975616335868835, 'learning_rate': 1.9048270524660197e-05, 'epoch': 0.18}
 19%|█▉        | 120/625 [1:07:49<4:39:16, 33.18s/it]2025-09-29 12:17:43,764 - INFO - Step 120: Train Loss = 0.2802
{'loss': 0.2802, 'grad_norm': 0.3935074210166931, 'learning_rate': 1.8813034520649923e-05, 'epoch': 0.19}
 20%|██        | 125/625 [1:10:36<4:38:04, 33.37s/it]
***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
Prompt : <|im_start|>system
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{"name": "racecards_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"**Get races list.**\n\n- By default current day.\n- Or by date, setting it by parameter\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
{"name": "race_detail_info_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"**Get race detailed info by ID {id_race}.**\n\nYou can get the \"id_race\" from Results or Racecards endpoints\"", "parameters": {"type": "object", "properties": {"id_race": {"type": "string", "description": "", "example_value": "53128"}}, "required": ["id_race"], "optional": []}}
{"name": "results_for_greyhound_racing_uk", "description": "This is the subfunction for tool \"greyhound_racing_uk\", you can use this tool.The description of this function is: \"Get results races by date\"", "parameters": {"type": "object", "properties": {}, "required": [], "optional": []}}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
<|im_start|>user
I'm a sports enthusiast and I'm interested in attending a greyhound race. Can you give me the race schedule for this week? I would like to know the dates, timings, and locations of the races. Additionally, I'm curious to learn more about a specific race with ID 53128, including the participating greyhounds and their details.
Begin!
<|im_end|>
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>

Rotated chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>

Assistant loss chunk 0:
<|im_start|>assistant
<tool_call>
{"name": "racecards_for_greyhound_racing_uk", "arguments": {}}
</tool_call><|im_end|>
<|im_start|>user
<tool_response>
{"error": "", "response": "[]"}
</tool_response><|im_end|>
<|im_start|>assistant
<think>

</think>

<tool_call>
{"name": "race_detail_info_for_greyhound_racing_uk", "arguments": {"id_race": "53128"}}
</tool_call><|im_end|>
 20%|██        | 125/625 [1:11:37<4:38:04, 33.32025-09-29 12:21:31,764 - INFO - Step 125: Eval Loss = 0.2472
100%|██████████| 19/19 [00:58<00:00,  2.67s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights

{'eval_loss': 0.24723771214485168, 'eval_runtime': 60.8242, 'eval_samples_per_second': 9.536, 'eval_steps_per_second': 0.312, 'epoch': 0.2}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
[2025-09-29 12:25:54,949] [WARNING] [stage3.py:2171:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 130/625 [1:18:16<7:31:08, 54.68s/it]2025-09-29 12:28:10,487 - INFO - Step 130: Train Loss = 0.2889
{'loss': 0.2889, 'grad_norm': 0.42775022983551025, 'learning_rate': 1.855364260160507e-05, 'epoch': 0.21}
 22%|██▏       | 140/625 [1:23:43<4:32:43, 33.74s/it]2025-09-29 12:33:37,432 - INFO - Step 140: Train Loss = 0.2568
{'loss': 0.2568, 'grad_norm': 0.4056949317455292, 'learning_rate': 1.827080574274562e-05, 'epoch': 0.22}
 24%|██▍       | 150/625 [1:29:15<4:22:33, 33.16s/it]2025-09-29 12:39:10,010 - INFO - Step 150: Train Loss = 0.2569
{'loss': 0.2569, 'grad_norm': 0.37407630681991577, 'learning_rate': 1.7965299180241963e-05, 'epoch': 0.24}
 26%|██▌       | 160/625 [1:34:46<4:17:15, 33.19s/it]2025-09-29 12:44:40,688 - INFO - Step 160: Train Loss = 0.2371
{'loss': 0.2371, 'grad_norm': 0.36659055948257446, 'learning_rate': 1.7637960286346423e-05, 'epoch': 0.26}
 27%|██▋       | 170/625 [1:40:20<4:14:58, 33.62s/it]2025-09-29 12:50:14,444 - INFO - Step 170: Train Loss = 0.2213
{'loss': 0.2213, 'grad_norm': 0.3360617458820343, 'learning_rate': 1.7289686274214116e-05, 'epoch': 0.27}
 29%|██▉       | 180/625 [1:45:54<4:08:02, 33.44s/it]2025-09-29 12:55:49,000 - INFO - Step 180: Train Loss = 0.2271
{'loss': 0.2271, 'grad_norm': 0.3472871780395508, 'learning_rate': 1.692143173870407e-05, 'epoch': 0.29}
 30%|███       | 190/625 [1:51:27<4:00:24, 33.16s/it]2025-09-29 13:01:21,740 - INFO - Step 190: Train Loss = 0.2258
{'loss': 0.2258, 'grad_norm': 0.33331531286239624, 'learning_rate': 1.6534206039901057e-05, 'epoch': 0.3}
 32%|███▏      | 200/625 [1:56:59<3:53:52, 33.02s/it]2025-09-29 13:06:53,533 - INFO - Step 200: Train Loss = 0.2186
{'loss': 0.2186, 'grad_norm': 0.3622385561466217, 'learning_rate': 1.6129070536529767e-05, 'epoch': 0.32}
 34%|███▎      | 210/625 [2:02:28<3:47:40, 32.92s/it]2025-09-29 13:12:22,896 - INFO - Step 210: Train Loss = 0.2018
{'loss': 0.2018, 'grad_norm': 0.31402456760406494, 'learning_rate': 1.570713567684432e-05, 'epoch': 0.34}
 35%|███▌      | 220/625 [2:08:04<3:45:33, 33.42s/it]2025-09-29 13:17:58,304 - INFO - Step 220: Train Loss = 0.1950
{'loss': 0.195, 'grad_norm': 0.3449792265892029, 'learning_rate': 1.5269557954966777e-05, 'epoch': 0.35}
 37%|███▋      | 230/625 [2:13:33<3:37:06, 32.98s/it]2025-09-29 13:23:27,869 - INFO - Step 230: Train Loss = 0.1846
{'loss': 0.1846, 'grad_norm': 0.3217880129814148, 'learning_rate': 1.4817536741017153e-05, 'epoch': 0.37}
 38%|███▊      | 240/625 [2:19:09<3:35:09, 33.53s/it]2025-09-29 13:29:03,135 - INFO - Step 240: Train Loss = 0.1787
{'loss': 0.1787, 'grad_norm': 0.30453088879585266, 'learning_rate': 1.4352310993723277e-05, 'epoch': 0.38}
 40%|████      | 250/625 [2:24:42<3:27:10, 33.15s/it]2025-09-29 13:34:36,141 - INFO - Step 250: Train Loss = 0.1867
{'loss': 0.1867, 'grad_norm': 0.3252408504486084, 'learning_rate': 1.3875155864521031e-05, 'epoch': 0.4}

***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
 40%|████      | 250/625 [2:25:40<3:27:10, 33.12025-09-29 13:35:34,717 - INFO - Step 250: Eval Loss = 0.1699
100%|██████████| 19/19 [00:55<00:00,  2.75s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 0.16988958418369293, 'eval_runtime': 58.566, 'eval_samples_per_second': 9.903, 'eval_steps_per_second': 0.324, 'epoch': 0.4}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Deleting older checkpoint [/dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-125] due to args.save_total_limit
 42%|████▏     | 260/625 [2:35:04<3:43:01, 36.66s/it]2025-09-29 13:44:58,512 - INFO - Step 260: Train Loss = 0.1714
{'loss': 0.1714, 'grad_norm': 0.30560070276260376, 'learning_rate': 1.3387379202452917e-05, 'epoch': 0.42}
 43%|████▎     | 270/625 [2:40:33<3:15:08, 32.98s/it]2025-09-29 13:50:27,537 - INFO - Step 270: Train Loss = 0.1772
{'loss': 0.1772, 'grad_norm': 0.6013599634170532, 'learning_rate': 1.2890317969444716e-05, 'epoch': 0.43}
 45%|████▍     | 280/625 [2:46:06<3:10:13, 33.08s/it]2025-09-29 13:56:00,890 - INFO - Step 280: Train Loss = 0.1884
{'loss': 0.1884, 'grad_norm': 0.3309530019760132, 'learning_rate': 1.238533457578581e-05, 'epoch': 0.45}
 46%|████▋     | 290/625 [2:51:39<3:06:15, 33.36s/it]2025-09-29 14:01:33,941 - INFO - Step 290: Train Loss = 0.1535
{'loss': 0.1535, 'grad_norm': 0.3319565951824188, 'learning_rate': 1.187381314585725e-05, 'epoch': 0.46}
 48%|████▊     | 300/625 [2:57:12<3:00:28, 33.32s/it]2025-09-29 14:07:06,599 - INFO - Step 300: Train Loss = 0.1872
{'loss': 0.1872, 'grad_norm': 0.333187460899353, 'learning_rate': 1.1357155724343046e-05, 'epoch': 0.48}
 50%|████▉     | 310/625 [3:02:46<2:57:14, 33.76s/it]2025-09-29 14:12:40,156 - INFO - Step 310: Train Loss = 0.1517
{'loss': 0.1517, 'grad_norm': 0.3698647916316986, 'learning_rate': 1.083677843332316e-05, 'epoch': 0.5}
 51%|█████     | 320/625 [3:08:20<2:48:49, 33.21s/it]2025-09-29 14:18:14,078 - INFO - Step 320: Train Loss = 0.1550
{'loss': 0.155, 'grad_norm': 1.394779086112976, 'learning_rate': 1.0314107590781284e-05, 'epoch': 0.51}
 53%|█████▎    | 330/625 [3:13:51<2:43:42, 33.30s/it]2025-09-29 14:23:45,908 - INFO - Step 330: Train Loss = 0.1633
{'loss': 0.1633, 'grad_norm': 0.32362452149391174, 'learning_rate': 9.790575801166432e-06, 'epoch': 0.53}
 54%|█████▍    | 340/625 [3:19:21<2:36:17, 32.90s/it]2025-09-29 14:29:15,263 - INFO - Step 340: Train Loss = 0.1487
{'loss': 0.1487, 'grad_norm': 0.31335577368736267, 'learning_rate': 9.267618028723687e-06, 'epoch': 0.54}
 56%|█████▌    | 350/625 [3:24:52<2:31:45, 33.11s/it]2025-09-29 14:34:46,555 - INFO - Step 350: Train Loss = 0.1655
{'loss': 0.1655, 'grad_norm': 0.34772270917892456, 'learning_rate': 8.746667664356957e-06, 'epoch': 0.56}
 58%|█████▊    | 360/625 [3:30:23<2:25:52, 33.03s/it]2025-09-29 14:40:17,356 - INFO - Step 360: Train Loss = 0.1461
{'loss': 0.1461, 'grad_norm': 0.33804547786712646, 'learning_rate': 8.22915259680417e-06, 'epoch': 0.58}
 59%|█████▉    | 370/625 [3:36:01<2:22:33, 33.54s/it]2025-09-29 14:45:55,192 - INFO - Step 370: Train Loss = 0.1404
{'loss': 0.1404, 'grad_norm': 0.3122990131378174, 'learning_rate': 7.716491298893443e-06, 'epoch': 0.59}
 60%|██████    | 375/625 [3:38:46<2:17:55, 33.10s/it]
***** Running Evaluation *****
  Num examples = 580
  Batch size = 8
 60%|██████    | 375/625 [3:39:46<2:17:55, 33.12025-09-29 14:49:40,520 - INFO - Step 375: Eval Loss = 0.1378
100%|██████████| 19/19 [00:57<00:00,  2.76s/it] stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use zero_to_fp32.py to recover weights
{'eval_loss': 0.13782638311386108, 'eval_runtime': 60.1528, 'eval_samples_per_second': 9.642, 'eval_steps_per_second': 0.316, 'epoch': 0.6}
Saving model checkpoint to /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375/config.json
Configuration saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375/generation_config.json
Model weights saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375/model.safetensors
chat template saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375/chat_template.jinja
tokenizer config file saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375/tokenizer_config.json
Special tokens file saved in /dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-375/special_tokens_map.json
/export/home2/weijie210/miniconda3/envs/ipi_hw/lib/python3.12/site-packages/torch/distributed/distributed_c10d.py:4807: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user.
  warnings.warn(  # warn only once
Deleting older checkpoint [/dataset/common/huggingface/model/qwen3_8b_ISE_ToolBench_Chat_SFT_40k/checkpoint-250] due to args.save_total_limit
 61%|██████    | 380/625 [3:46:24<3:41:51, 54.33s/it]2025-09-29 14:56:19,014 - INFO - Step 380: Train Loss = 0.1459
{'loss': 0.1459, 'grad_norm': 0.29798343777656555, 'learning_rate': 7.210088939607709e-06, 'epoch': 0.61}
 62%|██████▏   | 390/625 [3:51:54<2:11:29, 33.57s/it]2025-09-29 15:01:48,442 - INFO - Step 390: Train Loss = 0.1397
{'loss': 0.1397, 'grad_norm': 0.36798810958862305, 'learning_rate': 6.711333532614168e-06, 'epoch': 0.62}
